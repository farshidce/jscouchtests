# Makefile.in generated by automake 1.10 from Makefile.am.
# src/snappy/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/apache-couchdb
pkglibdir = $(libdir)/apache-couchdb
pkgincludedir = $(includedir)/apache-couchdb
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i386-apple-darwin10.7.0
host_triplet = i386-apple-darwin10.7.0
subdir = src/snappy
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_check_curl.m4 \
	$(top_srcdir)/m4/ac_check_icu.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h \
	$(top_builddir)/src/snappy/google-snappy/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(snappyprivdir)" \
	"$(DESTDIR)$(snappyebindir)"
snappyprivLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(snappypriv_LTLIBRARIES)
snappy_nif_la_LIBADD =
am__snappy_nif_la_SOURCES_DIST = snappy_nif.cc google-snappy/snappy.cc \
	google-snappy/snappy-sinksource.cc \
	google-snappy/snappy-stubs-internal.cc
am__objects_1 = snappy_nif.lo snappy.lo snappy-sinksource.lo \
	snappy-stubs-internal.lo
am_snappy_nif_la_OBJECTS =  \
	$(am__objects_1)
snappy_nif_la_OBJECTS = $(am_snappy_nif_la_OBJECTS)
snappy_nif_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(snappy_nif_la_LDFLAGS) $(LDFLAGS) -o $@
am_snappy_nif_la_rpath = -rpath \
	$(snappyprivdir)
DEFAULT_INCLUDES = -I. -I$(top_builddir) -I$(top_builddir)/src/snappy/google-snappy
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(snappy_nif_la_SOURCES)
DIST_SOURCES = $(am__snappy_nif_la_SOURCES_DIST)
snappyebinDATA_INSTALL = $(INSTALL_DATA)
DATA = $(snappyebin_DATA)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /space/git/couchdb/build-aux/missing --run aclocal-1.10
AMTAR = ${SHELL} /space/git/couchdb/build-aux/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /space/git/couchdb/build-aux/missing --run autoconf
AUTOHEADER = ${SHELL} /space/git/couchdb/build-aux/missing --run autoheader
AUTOMAKE = ${SHELL} /space/git/couchdb/build-aux/missing --run automake-1.10
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -L/usr/local/lib -L/opt/local/lib -I${exec_prefix}/lib/erlang/usr/include -I/usr/lib/erlang/usr/include -I/usr/local/lib/erlang/usr/include -I/opt/local/lib/erlang/usr/include -I/usr/include -I/usr/include/js -I/usr/include/mozjs -I/usr/local/include -I/opt/local/include -I/usr/local/include/js -I/opt/local/include/js -DXP_UNIX  
CURL_CFLAGS = 
CURL_CONFIG = /usr/bin/curl-config
CURL_LIBS = -lcurl
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = dsymutil
DUMPBIN = 
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
ERL = /usr/local/bin/erl
ERLANG_INCLUDE = 
ERLC = /usr/local/bin/erlc
ERLC_FLAGS = 
EXEEXT = 
FGREP = /usr/bin/grep -F
FLAGS =  -L/usr/local/lib -L/opt/local/lib -I${exec_prefix}/lib/erlang/usr/include -I/usr/lib/erlang/usr/include -I/usr/local/lib/erlang/usr/include -I/opt/local/lib/erlang/usr/include -I/usr/include -I/usr/include/js -I/usr/include/mozjs -I/usr/local/include -I/opt/local/include -I/usr/local/include/js -I/opt/local/include/js -DXP_UNIX 
GREP = /usr/bin/grep
HELP2MAN_EXECUTABLE = 
ICU_CFLAGS = -g -O2 -Wall -ansi -pedantic -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -Wno-long-long   
ICU_CONFIG = /usr/local/bin/icu-config
ICU_CXXFLAGS = -g -O2 -W -Wall -ansi -pedantic -Wpointer-arith -Wwrite-strings -Wno-long-long   
ICU_INCLUDE = 
ICU_LIBS =  -lpthread -lm   -L/usr/local/lib -licui18n -licuuc -licudata  -lpthread -lm   
ICU_LIB_DIR = 
ICU_LOCAL_BIN = 
ICU_LOCAL_CFLAGS = -I/usr/local/include 
ICU_LOCAL_LDFLAGS = -L/usr/local/lib 
INNO_COMPILER_EXECUTABLE = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JSLIB = -lmozjs
JS_INCLUDE = 
JS_LIB_BASE = mozjs
JS_LIB_BINARY = 
JS_LIB_DIR = 
LD = /usr/libexec/gcc/i686-apple-darwin10/4.2.1/ld
LDFLAGS =  -L/usr/local/lib -L/opt/local/lib -I${exec_prefix}/lib/erlang/usr/include -I/usr/lib/erlang/usr/include -I/usr/local/lib/erlang/usr/include -I/opt/local/lib/erlang/usr/include -I/usr/include -I/usr/include/js -I/usr/include/mozjs -I/usr/local/include -I/opt/local/include -I/usr/local/include/js -I/opt/local/include/js -DXP_UNIX  -lm 
LIBOBJS = 
LIBS =  -L/usr/local/lib -L/opt/local/lib 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /space/git/couchdb/build-aux/missing --run makeinfo
MKDIR_P = ../../build-aux/install-sh -c -d
NM = /usr/bin/nm
NMEDIT = nmedit
OBJEXT = o
OTOOL = otool
OTOOL64 = :
PACKAGE = apache-couchdb
PACKAGE_BUGREPORT = 
PACKAGE_NAME = Apache CouchDB
PACKAGE_STRING = Apache CouchDB 1.2.0a-fec96b1-git
PACKAGE_TARNAME = apache-couchdb
PACKAGE_VERSION = 1.2.0a-fec96b1-git
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
SNAPPY_MAJOR = 1
SNAPPY_MINOR = 0
SNAPPY_PATCHLEVEL = 3
STRIP = strip
VERSION = 1.2.0a-fec96b1-git
abs_builddir = /space/git/couchdb/src/snappy
abs_srcdir = /space/git/couchdb/src/snappy
abs_top_builddir = /space/git/couchdb
abs_top_srcdir = /space/git/couchdb
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_cv_have_stddef_h = 1
ac_cv_have_stdint_h = 1
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
bug_uri = https://issues.apache.org/jira/browse/COUCHDB
build = i386-apple-darwin10.7.0
build_alias = 
build_cpu = i386
build_os = darwin10.7.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-apple-darwin10.7.0
host_alias = 
host_cpu = i386
host_os = darwin10.7.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
initdir = 
install_sh = $(SHELL) /space/git/couchdb/build-aux/install-sh
launchddir = ${prefix}/Library/LaunchDaemons
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localconfdir = ${prefix}/etc/couchdb
localdatadir = ${datarootdir}/couchdb
localdocdir = ${datarootdir}/doc/couchdb
localedir = ${datarootdir}/locale
localerlanglibdir = ${exec_prefix}/lib/couchdb/erlang/lib
locallibbindir = ${exec_prefix}/lib/couchdb/bin
locallibdir = ${exec_prefix}/lib/couchdb
localstatedir = ${prefix}/var
localstatelibdir = ${prefix}/var/lib/couchdb
localstatelogdir = ${prefix}/var/log/couchdb
localstaterundir = ${prefix}/var/run/couchdb
lt_ECHO = /bin/echo
mandir = ${datarootdir}/man
mkdir_p = $(top_builddir)/build-aux/install-sh -c -d
msbuild_dir = 
msbuild_name = 
msvc_redist_dir = 
msvc_redist_name = 
oldincludedir = /usr/include
openssl_bin_dir = 
otp_release = R14B03
package_author_address = dev@couchdb.apache.org
package_author_name = The Apache Software Foundation
package_identifier = couchdb
package_name = Apache CouchDB
package_tarname = apache-couchdb
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ../..
top_srcdir = ../..
version = 1.2.0a-fec96b1-git
version_major = 1
version_minor = 2
version_release = -fec96b1-git
version_revision = 0
version_stage = a
snappyebindir = $(localerlanglibdir)/snappy-1.0.3/ebin
snappyprivdir = $(localerlanglibdir)/snappy-1.0.3/priv
#SNAPPY_OUTPUT_DIR = win32
#snappy_msbuild = $(SNAPPY_OUTPUT_DIR)/msbuild.bat
#snappy_vcproj = $(SNAPPY_OUTPUT_DIR)/snappy.vcxproj
#WIN_ERL_INCLUDE = $(SNAPPY_OUTPUT_DIR)/win_erl_include.tmp
#SNAPPY_NIF = $(SNAPPY_OUTPUT_DIR)/snappy_nif.dll
snappy_cxx_srcs = \
	snappy_nif.cc \
	google-snappy/snappy.cc \
	google-snappy/snappy-sinksource.cc \
	google-snappy/snappy-stubs-internal.cc

snappy_cxx_hdrs = \
	erl_nif_compat.h \
	google-snappy/snappy.h \
	google-snappy/snappy-internal.h \
	google-snappy/snappy-sinksource.h \
	google-snappy/snappy-stubs-internal.h \
	google-snappy/snappy-stubs-public.h

snappy_file_collection = \
    snappy.app.in \
    snappy.erl

snappyebin_make_generated_file_list = \
    snappy.app \
    snappy.beam

EXTRA_DIST = \
	$(snappy_cxx_hdrs) \
    $(snappy_file_collection)

CLEANFILES = \
    $(snappyebin_make_generated_file_list) \
	priv/snappy_nif.so

snappyebin_DATA = \
    $(snappyebin_make_generated_file_list)

snappypriv_LTLIBRARIES = snappy_nif.la
snappy_nif_la_SOURCES = $(snappy_cxx_srcs)
snappy_nif_la_LDFLAGS = -module -avoid-version
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  src/snappy/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/snappy/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-snappyprivLTLIBRARIES: $(snappypriv_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(snappyprivdir)" || $(MKDIR_P) "$(DESTDIR)$(snappyprivdir)"
	@list='$(snappypriv_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(snappyprivLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(snappyprivdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(snappyprivLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(snappyprivdir)/$$f"; \
	  else :; fi; \
	done

uninstall-snappyprivLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(snappypriv_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(snappyprivdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(snappyprivdir)/$$p"; \
	done

clean-snappyprivLTLIBRARIES:
	-test -z "$(snappypriv_LTLIBRARIES)" || rm -f $(snappypriv_LTLIBRARIES)
	@list='$(snappypriv_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
snappy_nif.la: $(snappy_nif_la_OBJECTS) $(snappy_nif_la_DEPENDENCIES) 
	$(snappy_nif_la_LINK) $(am_snappy_nif_la_rpath) $(snappy_nif_la_OBJECTS) $(snappy_nif_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/snappy-sinksource.Plo
include ./$(DEPDIR)/snappy-stubs-internal.Plo
include ./$(DEPDIR)/snappy.Plo
include ./$(DEPDIR)/snappy_nif.Plo

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

snappy.lo: google-snappy/snappy.cc
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT snappy.lo -MD -MP -MF $(DEPDIR)/snappy.Tpo -c -o snappy.lo `test -f 'google-snappy/snappy.cc' || echo '$(srcdir)/'`google-snappy/snappy.cc
	mv -f $(DEPDIR)/snappy.Tpo $(DEPDIR)/snappy.Plo
#	source='google-snappy/snappy.cc' object='snappy.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o snappy.lo `test -f 'google-snappy/snappy.cc' || echo '$(srcdir)/'`google-snappy/snappy.cc

snappy-sinksource.lo: google-snappy/snappy-sinksource.cc
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT snappy-sinksource.lo -MD -MP -MF $(DEPDIR)/snappy-sinksource.Tpo -c -o snappy-sinksource.lo `test -f 'google-snappy/snappy-sinksource.cc' || echo '$(srcdir)/'`google-snappy/snappy-sinksource.cc
	mv -f $(DEPDIR)/snappy-sinksource.Tpo $(DEPDIR)/snappy-sinksource.Plo
#	source='google-snappy/snappy-sinksource.cc' object='snappy-sinksource.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o snappy-sinksource.lo `test -f 'google-snappy/snappy-sinksource.cc' || echo '$(srcdir)/'`google-snappy/snappy-sinksource.cc

snappy-stubs-internal.lo: google-snappy/snappy-stubs-internal.cc
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT snappy-stubs-internal.lo -MD -MP -MF $(DEPDIR)/snappy-stubs-internal.Tpo -c -o snappy-stubs-internal.lo `test -f 'google-snappy/snappy-stubs-internal.cc' || echo '$(srcdir)/'`google-snappy/snappy-stubs-internal.cc
	mv -f $(DEPDIR)/snappy-stubs-internal.Tpo $(DEPDIR)/snappy-stubs-internal.Plo
#	source='google-snappy/snappy-stubs-internal.cc' object='snappy-stubs-internal.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o snappy-stubs-internal.lo `test -f 'google-snappy/snappy-stubs-internal.cc' || echo '$(srcdir)/'`google-snappy/snappy-stubs-internal.cc

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-snappyebinDATA: $(snappyebin_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(snappyebindir)" || $(MKDIR_P) "$(DESTDIR)$(snappyebindir)"
	@list='$(snappyebin_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(snappyebinDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(snappyebindir)/$$f'"; \
	  $(snappyebinDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(snappyebindir)/$$f"; \
	done

uninstall-snappyebinDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(snappyebin_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(snappyebindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(snappyebindir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(snappyprivdir)" "$(DESTDIR)$(snappyebindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-snappyprivLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-snappyebinDATA install-snappyprivLTLIBRARIES

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-snappyebinDATA uninstall-snappyprivLTLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-snappyprivLTLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-snappyebinDATA install-snappyprivLTLIBRARIES \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-snappyebinDATA uninstall-snappyprivLTLIBRARIES


priv/snappy_nif.so: snappy_nif.la
	@mkdir -p ./priv
	cp .libs/snappy_nif.so $@

all: priv/snappy_nif.so

#$(SNAPPY_NIF) : $(snappy_msbuild) $(snappy_vcproj)
#	$(MKDIR_P) "$(snappyprivdir)" || true
#	(cd win32 && ./msbuild.bat)
#	cp $(SNAPPY_NIF) $(snappyprivdir)

#all: $(SNAPPY_NIF)

#$(snappy_msbuild): $(snappy_msbuild).tpl
#	sed -e "s|%msbuild_dir%|$(msbuild_dir)|" \
#	    -e "s|%msbuild_name%|$(msbuild_name)|" \
#	    -e "s|^/cygdrive/\([a-zA-Z]\)|\1:|" \
#	< $< > $@

#$(snappy_vcproj): $(snappy_vcproj).tpl $(WIN_ERL_INCLUDE)
#	 sed -e "s|%ERLANG_INCLUDE%|`cat $(WIN_ERL_INCLUDE)`|" \
#	< $< > $@

#$(WIN_ERL_INCLUDE):$(ERLANG_INCLUDE)
#	echo $< | sed -e "s|^/cygdrive/\([a-zA-Z]\)|\1:|" > $@

%.app: %.app.in
	cp $< $@

%.beam: %.erl
	$(ERLC) $(ERLC_FLAGS) $<
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
